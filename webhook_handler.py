import asyncio
import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, Update
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from config import BOT_TOKEN, LOG_LEVEL, WEBHOOK_PATH, WEBHOOK_URL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL.upper())
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–§—É–Ω–∫—Ü—ñ—è 1: –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"""
    user = message.from_user
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ –¥–≤–æ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ (Webhook —Ä–µ–∂–∏–º):\n"
        f"‚Ä¢ /start - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
        f"‚Ä¢ /help - –¥–æ–ø–æ–º–æ–≥–∞\n"
        f"‚Ä¢ /echo - –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        f"‚Ä¢ /info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞",
        parse_mode="HTML"
    )

@dp.message(Command("help"))
async def help_handler(message: Message) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏"""
    help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/echo - –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –π–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—é!
    """
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("echo"))
async def echo_handler(message: Message) -> None:
    """–§—É–Ω–∫—Ü—ñ—è 2: –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /echo
    echo_text = message.text.replace('/echo', '').strip()
    if echo_text:
        await message.answer(f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {echo_text}")
    else:
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —â–æ—Å—å –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /echo")

@dp.message(Command("info"))
async def info_handler(message: Message) -> None:
    """–î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"""
    info_text = """
üìä <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:</b>

‚Ä¢ –ù–∞–∑–≤–∞: –ü—Ä–æ—Å—Ç–∏–π Telegram Bot
‚Ä¢ –í–µ—Ä—Å—ñ—è: 1.0
‚Ä¢ –§—É–Ω–∫—Ü—ñ—ó: 2 –æ—Å–Ω–æ–≤–Ω—ñ
‚Ä¢ –ú–æ–≤–∞: Python
‚Ä¢ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: aiogram 3.13
‚Ä¢ –†–µ–∂–∏–º: Webhook (ngrok)

–¶–µ–π –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –±–∞–∑–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
1. –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
2. –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    """
    await message.answer(info_text, parse_mode="HTML")

@dp.message(F.text)
async def handle_message(message: Message) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
    user_message = message.text
    await message.answer(f"üîî –í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {user_message}")

async def on_startup(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É webhook"""
    webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

async def on_shutdown(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏ webhook"""
    await bot.delete_webhook()
    logger.info("üõë Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

def create_app() -> web.Application:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è FastAPI –¥–æ–¥–∞—Ç–∫—É –¥–ª—è webhook"""
    app = web.Application()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    setup_application(app, dp, bot=bot)
    
    return app

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É webhook"""
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤ webhook —Ä–µ–∂–∏–º—ñ...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ .env —Ñ–∞–π–ª—ñ!")
        return
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    await on_startup(bot)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    app = create_app()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()
    
    logger.info("üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8080")
    logger.info(f"üì° Webhook URL: {WEBHOOK_URL}{WEBHOOK_PATH}")
    
    try:
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –∑—É–ø–∏–Ω–∫–∏
        await asyncio.Future()  # –ó–∞–ø—É—Å–∫ –Ω–∞ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
    finally:
        await on_shutdown(bot)
        await runner.cleanup()
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
