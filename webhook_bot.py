import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN, LOG_LEVEL, OPENAI_API_KEY
from openai_service import get_openai_service
from openai_tts_service import get_openai_tts_service
from openai_image_service import get_openai_image_service

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL.upper())
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_creative_prompt = State()
    waiting_for_code_prompt = State()
    waiting_for_translate_text = State()
    waiting_for_summarize_text = State()
    waiting_for_explain_concept = State()
    waiting_for_tts_text = State()
    waiting_for_image_prompt = State()
    # –°—Ç–∞–Ω–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    waiting_for_voice_setting = State()
    waiting_for_speed_setting = State()
    waiting_for_image_size_setting = State()
    waiting_for_image_quality_setting = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_settings = {}

def sanitize_telegram_text(text: str) -> str:
    """
    –û—á–∏—â–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏—Ö HTML —Ç–µ–≥—ñ–≤ –¥–ª—è Telegram
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        
    Returns:
        –û—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return text
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ HTML-–ø–æ–¥—ñ–±–Ω—ñ —Ç–µ–≥–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É
    # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—ñ —Ç–µ–≥–∏, —è–∫—ñ –ø—ñ–¥—Ç—Ä–∏–º—É—î Telegram
    text = re.sub(r'<[^>]*>', '', text)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ª–∏—à–∫–∏ HTML entities
    text = re.sub(r'&[a-zA-Z0-9#]+;', '', text)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤
    text = re.sub(r'\s+', ' ', text).strip()
    
    return text

def get_user_settings(user_id: int) -> dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in user_settings:
        user_settings[user_id] = {
            'voice': 'alloy',
            'speed': 1.0,
            'image_size': 'auto',
            'image_quality': 'auto'
        }
    return user_settings[user_id]

def update_user_setting(user_id: int, setting: str, value) -> None:
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in user_settings:
        get_user_settings(user_id)
    user_settings[user_id][setting] = value

def get_main_menu() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI", callback_data="ask_ai"),
            InlineKeyboardButton(text="‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ", callback_data="creative")
        ],
        [
            InlineKeyboardButton(text="üíª –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É", callback_data="code"),
            InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–∫–ª–∞–¥", callback_data="translate")
        ],
        [
            InlineKeyboardButton(text="üìù –†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç—É", callback_data="summarize"),
            InlineKeyboardButton(text="üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è", callback_data="explain")
        ],
        [
            InlineKeyboardButton(text="üé§ –û–∑–≤—É—á–∫–∞ (TTS)", callback_data="tts"),
            InlineKeyboardButton(text="üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å", callback_data="image")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
        ],
        [
            InlineKeyboardButton(text="üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="info")
        ]
    ])
    return keyboard

def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é '–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é'"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    return keyboard

def get_settings_menu_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å TTS", callback_data="settings_voice"),
            InlineKeyboardButton(text="‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å TTS", callback_data="settings_speed")
        ],
        [
            InlineKeyboardButton(text="üìê –†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", callback_data="settings_image_size"),
            InlineKeyboardButton(text="üé® –Ø–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", callback_data="settings_image_quality")
        ],
        [
            InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_voice_selection_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéµ Alloy", callback_data="voice_alloy"),
            InlineKeyboardButton(text="üîä Echo", callback_data="voice_echo")
        ],
        [
            InlineKeyboardButton(text="üìö Fable", callback_data="voice_fable"),
            InlineKeyboardButton(text="üíé Onyx", callback_data="voice_onyx")
        ],
        [
            InlineKeyboardButton(text="‚≠ê Nova", callback_data="voice_nova"),
            InlineKeyboardButton(text="‚ú® Shimmer", callback_data="voice_shimmer")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ])
    return keyboard

def get_speed_selection_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏–±–æ—Ä—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üêå 0.5x", callback_data="speed_0.5"),
            InlineKeyboardButton(text="üö∂ 0.75x", callback_data="speed_0.75")
        ],
        [
            InlineKeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è 1.0x", callback_data="speed_1.0"),
            InlineKeyboardButton(text="üèÉ 1.25x", callback_data="speed_1.25")
        ],
        [
            InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è 1.5x", callback_data="speed_1.5"),
            InlineKeyboardButton(text="üöÄ 2.0x", callback_data="speed_2.0")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω—É", callback_data="speed_custom")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ])
    return keyboard

def get_image_size_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì± 1024x1024", callback_data="size_1024x1024"),
            InlineKeyboardButton(text="üìÑ 1024x1536", callback_data="size_1024x1536")
        ],
        [
            InlineKeyboardButton(text="üñ•Ô∏è 1536x1024", callback_data="size_1536x1024"),
            InlineKeyboardButton(text="ü§ñ Auto", callback_data="size_auto")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ])
    return keyboard

def get_image_quality_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏–±–æ—Ä—É —è–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîß Low", callback_data="quality_low"),
            InlineKeyboardButton(text="‚öñÔ∏è Medium", callback_data="quality_medium")
        ],
        [
            InlineKeyboardButton(text="üé® High", callback_data="quality_high"),
            InlineKeyboardButton(text="ü§ñ Auto", callback_data="quality_auto")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data="settings")
        ]
    ])
    return keyboard

@dp.message(CommandStart())
async def start_handler(message: Message) -> None:
    """–§—É–Ω–∫—Ü—ñ—è 1: –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"""
    user = message.from_user
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å OpenAI API –∫–ª—é—á–∞
    openai_status = "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" if OPENAI_API_KEY else "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    
    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø —Ä–æ–∑—É–º–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ OpenAI.\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:\n\n"
        f"OpenAI: {openai_status}"
    )
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è callback-—ñ–≤ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é'"""
    await state.clear()
    openai_status = "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" if OPENAI_API_KEY else "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    
    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {callback.from_user.first_name}! üëã\n\n"
        f"–Ø —Ä–æ–∑—É–º–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ OpenAI.\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:\n\n"
        f"OpenAI: {openai_status}"
    )
    
    await callback.message.edit_text(
        welcome_text,
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "ask_ai")
async def ask_ai_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Ç–∞—Ç–∏ AI'"""
    await callback.message.edit_text(
        "ü§ñ <b>–ó–∞–ø–∏—Ç–∞—Ç–∏ AI</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –Ω–∞ –Ω—å–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –©–æ —Ç–∞–∫–µ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è?",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_text)
    await callback.answer()

@dp.callback_query(F.data == "creative")
async def creative_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ'"""
    await callback.message.edit_text(
        "‚ú® <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ</b>\n\n"
        "–û–ø–∏—à—ñ—Ç—å —Ç–µ–º—É –∞–±–æ –∂–∞–Ω—Ä, —ñ —è —Å—Ç–≤–æ—Ä—é –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à –ø—Ä–æ –∑–∏–º—É",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_creative_prompt)
    await callback.answer()

@dp.callback_query(F.data == "code")
async def code_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É'"""
    await callback.message.edit_text(
        "üíª <b>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É</b>\n\n"
        "–û–ø–∏—à—ñ—Ç—å, —è–∫–∏–π –∫–æ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_code_prompt)
    await callback.answer()

@dp.callback_query(F.data == "translate")
async def translate_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–∫–ª–∞–¥'"""
    await callback.message.edit_text(
        "üåê <b>–ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: Hello world",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_translate_text)
    await callback.answer()

@dp.callback_query(F.data == "summarize")
async def summarize_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç—É'"""
    await callback.message.edit_text(
        "üìù <b>–†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç—É</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∑—é–º—É–≤–∞—Ç–∏.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: [–≤–∞—à –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç]",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_summarize_text)
    await callback.answer()

@dp.callback_query(F.data == "explain")
async def explain_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–æ—è—Å–Ω–µ–Ω–Ω—è'"""
    await callback.message.edit_text(
        "üí° <b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é –∞–±–æ —Ç–µ—Ä–º—ñ–Ω, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—è—Å–Ω–∏—Ç–∏.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –©–æ —Ç–∞–∫–µ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è?",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_explain_concept)
    await callback.answer()

@dp.callback_query(F.data == "tts")
async def tts_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–û–∑–≤—É—á–∫–∞ (TTS)'"""
    await callback.message.edit_text(
        "üé§ <b>–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç—É</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_tts_text)
    await callback.answer()

@dp.callback_query(F.data == "image")
async def image_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å'"""
    await callback.message.edit_text(
        "üñºÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</b>\n\n"
        "–û–ø–∏—à—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —â–æ –≥—Ä–∞—î –∑ –º'—è—á–µ–º",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await state.set_state(UserStates.waiting_for_image_prompt)
    await callback.answer()

@dp.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–º–æ–≥–∞'"""
    help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>

<b>–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>
ü§ñ –ó–∞–ø–∏—Ç–∞—Ç–∏ AI - –∑–∞–ø–∏—Ç–∞—Ç–∏ —â–æ—Å—å —É —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É
‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
üíª –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤–∞—Ö
üåê –ü–µ—Ä–µ–∫–ª–∞–¥ - –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –Ω–∞ —Ä—ñ–∑–Ω—ñ –º–æ–≤–∏
üìù –†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç—É - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ä–µ–∑—é–º–µ
üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è - –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π
üé§ –û–∑–≤—É—á–∫–∞ (TTS) - –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤ –º–æ–≤—É
üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ –æ–ø–∏—Å–æ–º

<b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</b>
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤ –º–µ–Ω—é
2. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - —Ü—è –¥–æ–ø–æ–º–æ–≥–∞
    """
    await callback.message.edit_text(
        help_text, 
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "info")
async def info_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'"""
    openai_status = "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" if OPENAI_API_KEY else "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    
    info_text = f"""
üìä <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:</b>

‚Ä¢ –ù–∞–∑–≤–∞: –†–æ–∑—É–º–Ω–∏–π Telegram Bot –∑ OpenAI
‚Ä¢ –í–µ—Ä—Å—ñ—è: 2.0
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: 8 —Ñ—É–Ω–∫—Ü—ñ–π
‚Ä¢ –ú–æ–≤–∞: Python
‚Ä¢ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: aiogram 3.13
‚Ä¢ OpenAI: {openai_status}

<b>–¶–µ–π –±–æ—Ç –Ω–∞–¥–∞—î:</b>
1. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ OpenAI –¥–ª—è —Ä–æ–∑—É–º–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
2. –ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–¥—É
3. –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–∞ —Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
4. –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π
5. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–∑–≤—É—á–∫–∏ (TTS)
6. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å (DALL-E)
    """
    await callback.message.edit_text(
        info_text, 
        parse_mode="HTML",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
@dp.callback_query(F.data == "settings")
async def settings_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'"""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–º—ñ–Ω–∏:",
        parse_mode="HTML",
        reply_markup=get_settings_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_voice")
async def settings_voice_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ì–æ–ª–æ—Å TTS'"""
    await callback.message.edit_text(
        "üé§ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É TTS</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è:",
        parse_mode="HTML",
        reply_markup=get_voice_selection_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_speed")
async def settings_speed_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–®–≤–∏–¥–∫—ñ—Å—Ç—å TTS'"""
    await callback.message.edit_text(
        "‚ö° <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ TTS</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è:",
        parse_mode="HTML",
        reply_markup=get_speed_selection_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_image_size")
async def settings_image_size_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'"""
    await callback.message.edit_text(
        "üìê <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å:",
        parse_mode="HTML",
        reply_markup=get_image_size_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "settings_image_quality")
async def settings_image_quality_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–Ø–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'"""
    await callback.message.edit_text(
        "üé® <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —è–∫—ñ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å:",
        parse_mode="HTML",
        reply_markup=get_image_quality_keyboard()
    )
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≥–æ–ª–æ—Å—É
@dp.callback_query(F.data.startswith("voice_"))
async def voice_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É"""
    voice = callback.data.replace("voice_", "")
    user_id = callback.from_user.id
    
    update_user_setting(user_id, 'voice', voice)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {voice.title()}</b>\n\n"
        f"–¢–µ–ø–µ—Ä –≤—Å—ñ –æ–∑–≤—É—á–∫–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å <b>{voice}</b>",
        parse_mode="HTML",
        reply_markup=get_voice_selection_keyboard()
    )
    await callback.answer(f"–ì–æ–ª–æ—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {voice}")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —à–≤–∏–¥–∫–æ—Å—Ç—ñ
@dp.callback_query(F.data == "speed_custom")
async def speed_custom_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –≤–ª–∞—Å–Ω—É' —à–≤–∏–¥–∫—ñ—Å—Ç—å"""
    await callback.message.edit_text(
        "‚ö° <b>–í–≤–µ–¥—ñ—Ç—å –≤–ª–∞—Å–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.25 –¥–æ 4.0 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.5):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_speed")]
        ])
    )
    await state.set_state(UserStates.waiting_for_speed_setting)
    await callback.answer()

@dp.callback_query(F.data.startswith("speed_"))
async def speed_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
    
    speed_str = callback.data.replace("speed_", "")
    try:
        speed = float(speed_str)
        user_id = callback.from_user.id
        
        update_user_setting(user_id, 'speed', speed)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {speed}x</b>\n\n"
            f"–¢–µ–ø–µ—Ä –≤—Å—ñ –æ–∑–≤—É—á–∫–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å <b>{speed}x</b>",
            parse_mode="HTML",
            reply_markup=get_speed_selection_keyboard()
        )
        await callback.answer(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {speed}x")
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
@dp.callback_query(F.data.startswith("size_"))
async def image_size_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    size = callback.data.replace("size_", "")
    user_id = callback.from_user.id
    
    update_user_setting(user_id, 'image_size', size)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {size}</b>\n\n"
        f"–¢–µ–ø–µ—Ä –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏—Å—è –≤ —Ä–æ–∑–º—ñ—Ä—ñ <b>{size}</b>",
        parse_mode="HTML",
        reply_markup=get_image_size_keyboard()
    )
    await callback.answer(f"–†–æ–∑–º—ñ—Ä –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {size}")

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —è–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
@dp.callback_query(F.data.startswith("quality_"))
async def image_quality_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —è–∫–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    quality = callback.data.replace("quality_", "")
    user_id = callback.from_user.id
    
    update_user_setting(user_id, 'image_quality', quality)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–Ø–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {quality.upper()}</b>\n\n"
        f"–¢–µ–ø–µ—Ä –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏—Å—è –∑ —è–∫—ñ—Å—Ç—é <b>{quality.upper()}</b>",
        parse_mode="HTML",
        reply_markup=get_image_quality_keyboard()
    )
    await callback.answer(f"–Ø–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {quality}")

@dp.message(Command("help"))
async def help_handler(message: Message) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏"""
    help_text = """
ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>

<b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º (–ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é)
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/echo - –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
/info - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞

<b>OpenAI —Ñ—É–Ω–∫—Ü—ñ—ó:</b>
/ask - –ó–∞–ø–∏—Ç–∞—Ç–∏ —â–æ—Å—å —É AI (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /ask –©–æ —Ç–∞–∫–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç?)
/creative - –ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /creative –ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à –ø—Ä–æ –∑–∏–º—É)
/code - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /code –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è)
/translate - –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /translate Hello world)
/summarize - –†–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /summarize [–≤–∞—à –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç])
/explain - –ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /explain –©–æ —Ç–∞–∫–µ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è?)
/tts - –û–∑–≤—É—á–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /tts –ü—Ä–∏–≤—ñ—Ç! | alloy | 1.5)
/tts_settings - –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TTS —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
/image - –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /image –ö—ñ—Ç, —â–æ –≥—Ä–∞—î –∑ –º'—è—á–µ–º)

<b>–ù–æ–≤–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é:</b>
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∑—Ä—É—á–Ω–æ–≥–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ —è –π–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—é!
    """
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_back_to_menu_keyboard())

@dp.message(Command("echo"))
async def echo_handler(message: Message) -> None:
    """–§—É–Ω–∫—Ü—ñ—è 2: –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /echo
    echo_text = message.text.replace('/echo', '').strip()
    if echo_text:
        await message.answer(f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {echo_text}")
    else:
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —â–æ—Å—å –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /echo")

@dp.message(Command("info"))
async def info_handler(message: Message) -> None:
    """–î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"""
    openai_status = "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" if OPENAI_API_KEY else "‚ùå –ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    
    info_text = f"""
üìä <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:</b>

‚Ä¢ –ù–∞–∑–≤–∞: –†–æ–∑—É–º–Ω–∏–π Telegram Bot –∑ OpenAI
‚Ä¢ –í–µ—Ä—Å—ñ—è: 2.0
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: 4 –∫–æ–º–∞–Ω–¥–∏
‚Ä¢ OpenAI —Ñ—É–Ω–∫—Ü—ñ—ó: 9 –∫–æ–º–∞–Ω–¥
‚Ä¢ –ú–æ–≤–∞: Python
‚Ä¢ –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: aiogram 3.13
‚Ä¢ OpenAI: {openai_status}

<b>–¶–µ–π –±–æ—Ç –Ω–∞–¥–∞—î:</b>
1. –ë–∞–∑–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å (–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è)
2. –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ OpenAI –¥–ª—è —Ä–æ–∑—É–º–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
3. –ö—Ä–µ–∞—Ç–∏–≤–Ω–µ –ø–∏—Å—å–º–æ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–¥—É
4. –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–∞ —Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
5. –ü–æ—è—Å–Ω–µ–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π
6. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é –æ–∑–≤—É—á–∫–∏ (TTS)
7. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å (DALL-E)
    """
    await message.answer(info_text, parse_mode="HTML")

# OpenAI –∫–æ–º–∞–Ω–¥–∏
@dp.message(Command("ask"))
async def ask_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É —É AI"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /ask
    question = message.text.replace('/ask', '').strip()
    if not question:
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /ask\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /ask –©–æ —Ç–∞–∫–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç?")
        return
    
    try:
        # –ü–æ–∫–∞–∑—É—î–º–æ, —â–æ –±–æ—Ç –¥—É–º–∞—î
        thinking_msg = await message.answer("ü§î –î—É–º–∞—é...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Ä–≤—ñ—Å OpenAI
        openai_service = get_openai_service()
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = await openai_service.generate_text(question)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–î—É–º–∞—é..."
        await thinking_msg.delete()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(f"üß† <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n\n{sanitized_response}", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /ask: {e}", exc_info=True)
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {str(e)}")

@dp.message(Command("creative"))
async def creative_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    prompt = message.text.replace('/creative', '').strip()
    if not prompt:
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /creative\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /creative –ù–∞–ø–∏—à–∏ –≤—ñ—Ä—à –ø—Ä–æ –∑–∏–º—É")
        return
    
    try:
        thinking_msg = await message.answer("üé® –°—Ç–≤–æ—Ä—é—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.generate_creative_text(prompt)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(f"‚ú® <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n{sanitized_response}", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /creative: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É: {str(e)}")

@dp.message(Command("code"))
async def code_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    prompt = message.text.replace('/code', '').strip()
    if not prompt:
        await message.answer("–û–ø–∏—à—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /code\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /code –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É")
        return
    
    try:
        thinking_msg = await message.answer("üíª –ì–µ–Ω–µ—Ä—É—é –∫–æ–¥...")
        
        openai_service = get_openai_service()
        response = await openai_service.generate_code(prompt)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(f"üîß <b>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥:</b>\n\n<code>{sanitized_response}</code>", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /code: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É: {str(e)}")

@dp.message(Command("translate"))
async def translate_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    text = message.text.replace('/translate', '').strip()
    if not text:
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /translate\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /translate Hello world")
        return
    
    try:
        thinking_msg = await message.answer("üåê –ü–µ—Ä–µ–∫–ª–∞–¥–∞—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.translate_text(text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(f"üîÑ <b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b>\n\n{sanitized_response}", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /translate: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}")

@dp.message(Command("summarize"))
async def summarize_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    text = message.text.replace('/summarize', '').strip()
    if not text:
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /summarize\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /summarize [–≤–∞—à –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç]")
        return
    
    try:
        thinking_msg = await message.answer("üìù –°—Ç–≤–æ—Ä—é—é —Ä–µ–∑—é–º–µ...")
        
        openai_service = get_openai_service()
        response = await openai_service.summarize_text(text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(f"üìã <b>–†–µ–∑—é–º–µ:</b>\n\n{sanitized_response}", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /summarize: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑—é–º–µ: {str(e)}")

@dp.message(Command("explain"))
async def explain_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    concept = message.text.replace('/explain', '').strip()
    if not concept:
        await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /explain\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /explain –©–æ —Ç–∞–∫–µ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è?")
        return
    
    try:
        thinking_msg = await message.answer("üí° –ü–æ—è—Å–Ω—é—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.explain_concept(concept)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(f"üéì <b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</b>\n\n{sanitized_response}", parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /explain: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—ñ: {str(e)}")

@dp.message(Command("tts"))
async def tts_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–∞—Ä—Å–∏–º–æ –∫–æ–º–∞–Ω–¥—É —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    command_text = message.text.replace('/tts', '').strip()
    if not command_text:
        await message.answer(
            "üé§ <b>–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç—É</b>\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
            "‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?</code> - –∑–≤–∏—á–∞–π–Ω–∞ –æ–∑–≤—É—á–∫–∞\n"
            "‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏? | 1.5</code> - –æ–∑–≤—É—á–∫–∞ –∑—ñ —à–≤–∏–¥–∫—ñ—Å—Ç—é 1.5x\n"
            "‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏? | alloy | 1.5</code> - –∑ –≥–æ–ª–æ—Å–æ–º —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—é\n\n"
            "–ì–æ–ª–æ—Å–∏: alloy, echo, fable, onyx, nova, shimmer\n"
            "–®–≤–∏–¥–∫—ñ—Å—Ç—å: 0.25 - 4.0 (1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω–∞)",
            parse_mode="HTML"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (—Ç–µ–∫—Å—Ç | –≥–æ–ª–æ—Å | —à–≤–∏–¥–∫—ñ—Å—Ç—å)
        parts = command_text.split('|')
        text = parts[0].strip()
        
        if not text:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è")
            return
        
        voice = None
        speed = None
        
        if len(parts) >= 2:
            voice = parts[1].strip()
        if len(parts) >= 3:
            try:
                speed = float(parts[2].strip())
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.5)")
                return
        
        thinking_msg = await message.answer("üé§ –ì–µ–Ω–µ—Ä—É—é –æ–∑–≤—É—á–∫—É...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ
        user_id = message.from_user.id
        settings = get_user_settings(user_id)
        
        final_voice = voice or settings['voice']
        final_speed = speed if speed is not None else settings['speed']
        
        tts_service = get_openai_tts_service()
        audio_data = await tts_service.generate_speech_with_validation(text, final_voice, final_speed)
        
        await thinking_msg.delete()
        
        # –§–æ—Ä–º—É—î–º–æ –ø—ñ–¥–ø–∏—Å
        caption_parts = [f"üîä <b>–û–∑–≤—É—á–∫–∞:</b> {text}"]
        if voice:
            caption_parts.append(f"–ì–æ–ª–æ—Å: {voice}")
        if speed:
            caption_parts.append(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed}x")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª
        audio_input = types.BufferedInputFile(
            file=audio_data,
            filename="speech.mp3"
        )
        
        await message.answer_voice(
            voice=audio_input,
            caption="\n".join(caption_parts),
            parse_mode="HTML"
        )
        
    except ValueError as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /tts: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–∑–≤—É—á–∫–∏: {str(e)}")

@dp.message(Command("tts_settings"))
async def tts_settings_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å TTS"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        tts_service = get_openai_tts_service()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        current_voice = tts_service.voice
        current_speed = tts_service.speed
        available_voices = tts_service.get_available_voices()
        speed_range = tts_service.get_speed_range()
        
        settings_text = f"""
üé§ <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TTS</b>

<b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –ì–æ–ª–æ—Å: <code>{current_voice}</code>
‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å: <code>{current_speed}x</code>

<b>–î–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å–∏:</b>
{', '.join(available_voices)}

<b>–î—ñ–∞–ø–∞–∑–æ–Ω —à–≤–∏–¥–∫–æ—Å—Ç—ñ:</b>
{speed_range[0]}x - {speed_range[1]}x (1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω–∞)

<b>–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b>
‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç!</code> - –∑–≤–∏—á–∞–π–Ω–∞ –æ–∑–≤—É—á–∫–∞
‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç! | 1.5</code> - —à–≤–∏–¥–∫—ñ—Å—Ç—å 1.5x
‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç! | nova</code> - –≥–æ–ª–æ—Å nova
‚Ä¢ <code>/tts –ü—Ä–∏–≤—ñ—Ç! | echo | 0.8</code> - –≥–æ–ª–æ—Å echo, —à–≤–∏–¥–∫—ñ—Å—Ç—å 0.8x
        """
        
        await message.answer(settings_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /tts_settings: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {str(e)}")

@dp.message(Command("image"))
async def image_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    prompt = message.text.replace('/image', '').strip()
    if not prompt:
        await message.answer("–û–ø–∏—à—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /image\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /image –ö—ñ—Ç, —â–æ –≥—Ä–∞—î –∑ –º'—è—á–µ–º")
        return
    
    try:
        thinking_msg = await message.answer("üé® –°—Ç–≤–æ—Ä—é—é 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = message.from_user.id
        settings = get_user_settings(user_id)
        
        image_service = get_openai_image_service()
        # –ì–µ–Ω–µ—Ä—É—î–º–æ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_bytes_list = await image_service.generate_image(
            prompt, 
            size=settings['image_size'], 
            quality=settings['image_quality'], 
            n=2
        )
        
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(image_bytes_list)} –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        
        await thinking_msg.delete()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if image_bytes_list and len(image_bytes_list) >= 2:
            for i, image_bytes in enumerate(image_bytes_list[:2], 1):
                photo_file = BufferedInputFile(image_bytes, filename=f"generated_image_{i}.png")
                
                await message.answer_photo(
                    photo=photo_file,
                    caption=f"üñºÔ∏è <b>–í–∞—Ä—ñ–∞–Ω—Ç {i}:</b> {prompt}\n"
                           f"–†–æ–∑–º—ñ—Ä: {settings['image_size']}, –Ø–∫—ñ—Å—Ç—å: {settings['image_quality'].upper()}",
                    parse_mode="HTML"
                )
        elif image_bytes_list and len(image_bytes_list) == 1:
            # –Ø–∫—â–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_bytes = image_bytes_list[0]
            photo_file = BufferedInputFile(image_bytes, filename="generated_image.png")
            
            await message.answer_photo(
                photo=photo_file,
                caption=f"üñºÔ∏è <b>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:</b> {prompt}\n"
                       f"–†–æ–∑–º—ñ—Ä: {settings['image_size']}, –Ø–∫—ñ—Å—Ç—å: {settings['image_quality'].upper()}",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /image: {e}")
        await message.answer(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}")

@dp.message(Command("image_debug"))
async def image_debug_handler(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
        return
    
    prompt = message.text.replace('/image_debug', '').strip()
    if not prompt:
        prompt = "A simple red circle"  # –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–æ–º—Ç
    
    try:
        await message.answer(f"üîç <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</b>\n\n–ü—Ä–æ–º—Ç: {prompt}", parse_mode="HTML")
        
        image_service = get_openai_image_service()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        settings_info = f"""
<b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å: {image_service.model}
‚Ä¢ –†–æ–∑–º—ñ—Ä: {image_service.default_size}
‚Ä¢ –Ø–∫—ñ—Å—Ç—å: {image_service.default_quality}
        """
        await message.answer(settings_info, parse_mode="HTML")
        
        # –¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
        await message.answer("üé® –¢–µ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é...")
        image_bytes_list = await image_service.generate_image(prompt, n=1)
        
        debug_info = f"""
<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(image_bytes_list) if image_bytes_list else 0}
‚Ä¢ –†–æ–∑–º—ñ—Ä –ø–µ—Ä—à–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(image_bytes_list[0]) if image_bytes_list and len(image_bytes_list) > 0 else 'None'} –±–∞–π—Ç
        """
        await message.answer(debug_info, parse_mode="HTML")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
        if image_bytes_list and len(image_bytes_list) > 0:
            image_bytes = image_bytes_list[0]
            photo_file = BufferedInputFile(image_bytes, filename="debug_image.png")
            await message.answer_photo(
                photo=photo_file,
                caption="‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /image_debug: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")

# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—ñ–≤ —É —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞–Ω–∞—Ö
@dp.message(UserStates.waiting_for_text)
async def handle_ask_ai_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–∞–ø–∏—Ç—É AI"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("ü§î –î—É–º–∞—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.generate_text(message.text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(
            f"üß† <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n\n{sanitized_response}", 
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É AI: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_creative_prompt)
async def handle_creative_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üé® –°—Ç–≤–æ—Ä—é—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.generate_creative_text(message.text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(
            f"‚ú® <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n{sanitized_response}", 
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–º—É –ø–∏—Å—å–º—ñ: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_code_prompt)
async def handle_code_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üíª –ì–µ–Ω–µ—Ä—É—é –∫–æ–¥...")
        
        openai_service = get_openai_service()
        response = await openai_service.generate_code(message.text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(
            f"üîß <b>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥:</b>\n\n<code>{sanitized_response}</code>", 
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_translate_text)
async def handle_translate_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üåê –ü–µ—Ä–µ–∫–ª–∞–¥–∞—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.translate_text(message.text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(
            f"üîÑ <b>–ü–µ—Ä–µ–∫–ª–∞–¥:</b>\n\n{sanitized_response}", 
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_summarize_text)
async def handle_summarize_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—è"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üìù –°—Ç–≤–æ—Ä—é—é —Ä–µ–∑—é–º–µ...")
        
        openai_service = get_openai_service()
        response = await openai_service.summarize_text(message.text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(
            f"üìã <b>–†–µ–∑—é–º–µ:</b>\n\n{sanitized_response}", 
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∑—é–º—É–≤–∞–Ω–Ω—ñ: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–µ–∑—é–º–µ: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_explain_concept)
async def handle_explain_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üí° –ü–æ—è—Å–Ω—é—é...")
        
        openai_service = get_openai_service()
        response = await openai_service.explain_concept(message.text)
        
        await thinking_msg.delete()
        sanitized_response = sanitize_telegram_text(response)
        await message.answer(
            f"üéì <b>–ü–æ—è—Å–Ω–µ–Ω–Ω—è:</b>\n\n{sanitized_response}", 
            parse_mode="HTML",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø–æ—è—Å–Ω–µ–Ω–Ω—ñ: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—ñ: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_tts_text)
async def handle_tts_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—è"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üé§ –ì–µ–Ω–µ—Ä—É—é –æ–∑–≤—É—á–∫—É...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = message.from_user.id
        settings = get_user_settings(user_id)
        
        tts_service = get_openai_tts_service()
        audio_data = await tts_service.generate_speech_with_validation(
            message.text, 
            voice=settings['voice'], 
            speed=settings['speed']
        )
        
        await thinking_msg.delete()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª
        audio_input = types.BufferedInputFile(
            file=audio_data,
            filename="speech.mp3"
        )
        
        await message.answer_voice(
            voice=audio_input,
            caption=f"üîä <b>–û–∑–≤—É—á–∫–∞:</b> {message.text}\n"
                   f"–ì–æ–ª–æ—Å: {settings['voice']}, –®–≤–∏–¥–∫—ñ—Å—Ç—å: {settings['speed']}x",
            parse_mode="HTML"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é" –æ–∫—Ä–µ–º–æ
        await message.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞!",
            reply_markup=get_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–∑–≤—É—á—É–≤–∞–Ω–Ω—ñ: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–∑–≤—É—á–∫–∏: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

@dp.message(UserStates.waiting_for_image_prompt)
async def handle_image_text(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    if not OPENAI_API_KEY:
        await message.answer("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    try:
        thinking_msg = await message.answer("üé® –°—Ç–≤–æ—Ä—é—é 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = message.from_user.id
        settings = get_user_settings(user_id)
        
        image_service = get_openai_image_service()
        # –ì–µ–Ω–µ—Ä—É—î–º–æ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_bytes_list = await image_service.generate_image(
            message.text, 
            size=settings['image_size'], 
            quality=settings['image_quality'], 
            n=2
        )
        
        await thinking_msg.delete()
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if image_bytes_list and len(image_bytes_list) >= 2:
            for i, image_bytes in enumerate(image_bytes_list[:2], 1):
                photo_file = BufferedInputFile(image_bytes, filename=f"generated_image_{i}.png")
                
                await message.answer_photo(
                    photo=photo_file,
                    caption=f"üñºÔ∏è <b>–í–∞—Ä—ñ–∞–Ω—Ç {i}:</b> {message.text}\n"
                           f"–†–æ–∑–º—ñ—Ä: {settings['image_size']}, –Ø–∫—ñ—Å—Ç—å: {settings['image_quality'].upper()}",
                    parse_mode="HTML"
                )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é" –æ–∫—Ä–µ–º–æ
            await message.answer(
                "‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!",
                reply_markup=get_back_to_menu_keyboard()
            )
        elif image_bytes_list and len(image_bytes_list) == 1:
            # –Ø–∫—â–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–æ—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            image_bytes = image_bytes_list[0]
            photo_file = BufferedInputFile(image_bytes, filename="generated_image.png")
            
            await message.answer_photo(
                photo=photo_file,
                caption=f"üñºÔ∏è <b>–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:</b> {message.text}\n"
                       f"–†–æ–∑–º—ñ—Ä: {settings['image_size']}, –Ø–∫—ñ—Å—Ç—å: {settings['image_quality'].upper()}",
                parse_mode="HTML"
            )
            
            await message.answer(
                "‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ! (–û—Ç—Ä–∏–º–∞–Ω–æ 1 –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞–º—ñ—Å—Ç—å 2)",
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
                reply_markup=get_back_to_menu_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        await message.answer(
            f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {str(e)}",
            reply_markup=get_back_to_menu_keyboard()
        )
    
    await state.clear()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
@dp.message(UserStates.waiting_for_speed_setting)
async def handle_custom_speed(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
    try:
        speed = float(message.text)
        if not (0.25 <= speed <= 4.0):
            await message.answer(
                "‚ùå –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤—ñ–¥ 0.25 –¥–æ 4.0. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_speed")]
                ])
            )
            return
        
        user_id = message.from_user.id
        update_user_setting(user_id, 'speed', speed)
        
        await message.answer(
            f"‚úÖ <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {speed}x</b>\n\n"
            f"–¢–µ–ø–µ—Ä –≤—Å—ñ –æ–∑–≤—É—á–∫–∏ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å <b>{speed}x</b>",
            parse_mode="HTML",
            reply_markup=get_speed_selection_keyboard()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.25 –¥–æ 4.0 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1.5):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings_speed")]
            ])
        )
        return
    
    await state.clear()

@dp.message(F.text)
async def handle_message(message: Message) -> None:
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
    user_message = message.text
    await message.answer(f"üîî –í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {user_message}")

# Webhook imports
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from config import WEBHOOK_PATH, WEBHOOK_URL

async def on_startup(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É webhook"""
    webhook_url = f"{WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(url=webhook_url)
    logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

async def on_shutdown(bot: Bot) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏ webhook"""
    await bot.delete_webhook()
    logger.info("üõë Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

def create_app() -> web.Application:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è FastAPI –¥–æ–¥–∞—Ç–∫—É –¥–ª—è webhook"""
    app = web.Application()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    setup_application(app, dp, bot=bot)
    
    return app

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É webhook"""
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –≤ webhook —Ä–µ–∂–∏–º—ñ...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ .env —Ñ–∞–π–ª—ñ!")
        return
    
    if not OPENAI_API_KEY:
        logger.warning("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. OpenAI —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
    else:
        logger.info("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ.")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    await on_startup(bot)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    app = create_app()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–¥–ª—è –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    port = int(os.getenv('PORT', 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logger.info(f"üåê Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ 0.0.0.0:{port}")
    logger.info(f"üì° Webhook URL: {WEBHOOK_URL}{WEBHOOK_PATH}")
    
    try:
        # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É –∑—É–ø–∏–Ω–∫–∏
        await asyncio.Future()  # –ó–∞–ø—É—Å–∫ –Ω–∞ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —á–∞—Å
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
    finally:
        await on_shutdown(bot)
        await runner.cleanup()
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")