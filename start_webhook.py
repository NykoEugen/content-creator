import asyncio
import logging
import threading
import time
from pyngrok import ngrok, conf
from config import BOT_TOKEN, WEBHOOK_PORT, WEBHOOK_PATH, NGROK_AUTH_TOKEN, NGROK_REGION, LOG_LEVEL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL.upper())
)
logger = logging.getLogger(__name__)

def setup_ngrok():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ngrok —Ç—É–Ω–Ω–µ–ª—é"""
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è auth token —è–∫—â–æ –≤—ñ–Ω —î
        if NGROK_AUTH_TOKEN:
            ngrok.set_auth_token(NGROK_AUTH_TOKEN)
            logger.info("‚úÖ Ngrok auth token –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—É
        conf.get_default().region = NGROK_REGION
        logger.info(f"üåç Ngrok —Ä–µ–≥—ñ–æ–Ω: {NGROK_REGION}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É–Ω–Ω–µ–ª—é
        tunnel = ngrok.connect(WEBHOOK_PORT, "http")
        public_url = tunnel.public_url
        logger.info(f"üöá Ngrok —Ç—É–Ω–Ω–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ: {public_url}")
        
        return public_url
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ngrok —Ç—É–Ω–Ω–µ–ª—é: {e}")
        return None

def cleanup_ngrok():
    """–û—á–∏—â–µ–Ω–Ω—è ngrok —Ç—É–Ω–Ω–µ–ª—ñ–≤"""
    try:
        ngrok.disconnect(ngrok.get_tunnels())
        ngrok.kill()
        logger.info("üßπ Ngrok —Ç—É–Ω–Ω–µ–ª—ñ –æ—á–∏—â–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è ngrok: {e}")

async def start_webhook_bot(webhook_url):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ webhook"""
    try:
        # –Ü–º–ø–æ—Ä—Ç webhook handler
        from webhook_handler import main as webhook_main
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è WEBHOOK_URL –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        import os
        os.environ['WEBHOOK_URL'] = webhook_url
        
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ webhook –±–æ—Ç–∞ –∑ URL: {webhook_url}")
        await webhook_main()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É webhook –±–æ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ ngrok webhook...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ .env —Ñ–∞–π–ª—ñ!")
        return
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ngrok
    webhook_url = setup_ngrok()
    if not webhook_url:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ ngrok —Ç—É–Ω–Ω–µ–ª—å!")
        return
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É webhook –¥–æ URL
    full_webhook_url = f"{webhook_url}{WEBHOOK_PATH}"
    logger.info(f"üì° –ü–æ–≤–Ω–∏–π webhook URL: {full_webhook_url}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        asyncio.run(start_webhook_bot(full_webhook_url))
    except KeyboardInterrupt:
        logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è ngrok
        cleanup_ngrok()
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    main()
